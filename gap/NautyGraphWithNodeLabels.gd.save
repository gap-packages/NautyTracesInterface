#############################################################################
##
##                                NautyTracesInterface package
##
##  Copyright 2017-2018, Sebastian Gutsche, Universit√§t Siegen
##
#############################################################################

#! @Chapter Graphs with node labels
#! @Section Working with Nauty Graphs with labels
#! @SectionLabel Nauty_Graphs_Labels

DeclareCategory( "IsNautyGraphWithNodeLabels",
                 IsNautyGraph );

#! TODO: document this
DeclareAttribute( "NodeLabeling", IsNautyGraphWithNodeLabels );

#! TODO: document this
DeclareAttribute( "UnderlyingNautyGraph", IsNautyGraphWithNodeLabels );


## Constructors
#! @BeginGroup
#! @Description
#! Construct a nauty (di)graph with node labels and optional vertex coloring.
#! This object has an underlying nauty graph. Suppose we have a graph on
#! <A>nr</A> nodes given by a list <A>edges</A> of edges and we want to
#! reorder the nodes such that the <A>i</A>th node becomes node <A>j</A>.
#! This function constructs a graph on nodes with the new names and
#! the corresponding edges.
#! 
#!
#! Arguments:
#! * labels: dense list of positive integers which is a permutation <M>\pi</M> of
#!   <A>[1..nr]</A>, where nr is the number of nodes. If <A>i</A> is a node
#!   in the underlying nauty graph, then <A>labels[i] = j</A>  means that the
#!    <A>i</A>-th node has label  <A>j</A>.  Let <M>\psi=\pi^{-1}</M>.
#!  * edges: dense list of edges, encoded as pairs of positive integers,
#!   each interpreted as a node label. In particular, if <A>[j1,j2]</A> is
#!   an edge in the list <A>edges</A>, then the constructed nauty graph
#!   contains the edge  <M>[j1^\psi, j2^\psi ]</M>.
#! * coloring (optional): dense list of colors (positive integers), 
#!      indexed by the nodes of the underlying nauty graph
#! 
#! @Returns a <K>NautyGraph</K>
#!
#! @BeginExampleSession
#! gap> labels :=  ListPerm( (1,4,2,3,5) ));;
#! gap> ng :=  NautyDiGraphWithNodeLabels( [[1,2],[1,3],[1,4] [1,5]], labels);
#! <An undirected Nauty graph with on 5 vertices>
#! gap> EdgesOfNautyGraph(ng);
#! [ [ 5, 1 ], [ 5, 2 ], [ 5, 3 ], [ 5, 4 ] ]
#! gap> psi := (1,4,2,3,5)^(-1);;
#! gap> 1^psi;
#! 5
#! @EndExampleSession
#! @Arguments edges, labeling
DeclareOperation( "NautyGraphWithNodeLabels", [ IsList, IsList ] );
#! @Arguments edges, labeling
DeclareOperation( "NautyDiGraphWithNodeLabels", [ IsList, IsList ] );
#! @Arguments edges, colors, labeling
DeclareOperation( "NautyColoredGraphWithNodeLabels", [ IsList, IsList, IsList ] );
#! @Arguments edges, colors labeling
DeclareOperation( "NautyColoredDiGraphWithNodeLabels", [ IsList, IsList, IsList ] );
#! @EndGroup
